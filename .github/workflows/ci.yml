name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  # 毎週月曜日の朝に定期実行
  schedule:
    - cron: '0 0 * * 1'
  # 手動実行を許可
  workflow_dispatch:

# 同じワークフローの同時実行を制御
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # full history for better blame info

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python
      run: uv python pin ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --all-extras --group dev

    - name: Run pre-commit
      run: uv run pre-commit run --all-files

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python
      run: uv python pin ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --all-extras --group dev

    - name: Run mypy
      run: uv run mypy -p hibikasu_agent --show-error-codes --pretty --explicit-package-bases

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python pin ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras --group dev

    - name: Run tests
      run: |
        uv run pytest tests/ \
          --cov=src/hibikasu_agent \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html \
          --junit-xml=test-results.xml \
          -v

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: test-results.xml

    # オプション: カバレッジレポートのアップロード
    # - name: Upload coverage reports
    #   uses: codecov/codecov-action@v4
    #   with:
    #     file: ./coverage.xml
    #     flags: unittests
    #     name: ${{ matrix.os }}-${{ matrix.python-version }}
    #     fail_ci_if_error: false  # カバレッジサービスの問題でCIを失敗させない

  # オプション: パッケージのビルド
  # build:
  #   name: Build Distribution
  #   needs: [lint, type-check, test]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Install uv
  #     uses: astral-sh/setup-uv@v3

  #   - name: Build package
  #     run: uv build

  #   - name: Check built distributions
  #     run: |
  #       uv run twine check dist/*
  #       ls -la dist/

  #   - name: Upload distributions
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: dist
  #       path: dist/

  # オプション: ドキュメントのビルド
  # docs:
  #   name: Build Documentation
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Install uv
  #     uses: astral-sh/setup-uv@v3
  #     with:
  #       enable-cache: true

  #   - name: Set up Python
  #     run: uv python pin ${{ env.PYTHON_VERSION }}

  #   - name: Install dependencies
  #     run: |
  #       uv sync --all-extras
  #       uv add sphinx sphinx-rtd-theme sphinx-autodoc-typehints

  #   - name: Build docs
  #     run: |
  #       uv run sphinx-build -b html docs/ docs/_build/html

  #   - name: Upload docs
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: docs
  #       path: docs/_build/html/

  # すべてのジョブが成功したかチェック（branch protectionで使用）
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [
      lint,
      type-check,
      test,
      # build,
      # docs
    ]
    if: always()
    steps:
      - name: Decide whether the all jobs succeeded
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
